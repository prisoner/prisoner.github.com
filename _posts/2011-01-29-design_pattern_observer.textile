---
layout: post
title: 设计模式之Observer
---

"wikipedia":http://en.wikipedia.org/wiki/Observer_pattern

bq. The *observer pattern* (a subset of the publish/subscribe pattern) is a software design pattern in which an object, called the subject, maintains a list of its dependents, called observers, and notifies them automatically of any state changes, usually by calling one of their methods. It is mainly used to implement distributed event handling systems.

p. Observer模式定义了一种一队多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态上发生变化时，会通知所有观察者对象，使他们能够自动更新自己。

h3. c1312.Observable

{% highlight javascript %}
var c1312 = c1312 || {};

c1312.Observable = function() {
    this._observers = [];
}

c1312.Observable.prototype = {
  addObserver: function(o) {
    this._observers.push(o);
  },
  deleteObserver: function(o) {
   for(var i = 0; i < this._observers.length; i++ ) {
      if(this._observers[i] == o)
          this._observers.splice(i,1);
    }
  },
  notifyObservers: function(msg) {
    for(var i = 0; i < this._observers.length; i++ ) {
      this._observers[i](msg);
    }
  }
}{% endhighlight %}

h3. qunit 测试

{% highlight javascript %}
module("c1312.Observable");
test("c1312.Observable 测试", function() {

  var subject = new c1312.Observable();
  var observer_count = 0;

  var o1 = function(msg) {
    observer_count ++;
    equals(msg, 'hello', 'notifyObservers操作1');
  }

  var o2 = function(msg) {
    observer_count ++;
    equals(msg, 'hello', 'notifyObservers操作2');
  }

  var o3 = function(msg) {
    observer_count ++;
    equals(msg, 'hello', 'notifyObservers操作3');
  }

  subject.addObserver(o1);
  subject.addObserver(o2);
  subject.addObserver(o3);
  subject.deleteObserver(o2);
  subject.notifyObservers('hello');
  equals(observer_count, 2, 'deleteObserver操作');

});{% endhighlight %}

